!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.shonaui=t():e.shonaui=t()}(this,(function(){return(()=>{"use strict";var e={119:(e,t)=>{t.__esModule=!0,t.default=[{aliases:["text-color","tc"],keys:["color"],handler:"color"},{aliases:["text-size","ts"],keys:["font-size"],handler:"size"},{aliases:["text-align","ta"],keys:["text-align"],handler:null},{aliases:["font-weight","fw"],keys:["font-weight"],handler:null},{aliases:["margin","m"],keys:["margin"],handler:"size"},{aliases:["margin-x","mx"],keys:["margin-left","margin-right"],handler:"size"},{aliases:["margin-top","mt"],keys:["margin-top"],handler:"size"},{aliases:["margin","m"],keys:["margin"],handler:"size"},{aliases:["text-decoration","td"],keys:["text-decoration"],handler:null},{aliases:["background-color","bg"],keys:["background-color"],handler:"color"},{aliases:["padding","p"],keys:["padding"],handler:"size"},{aliases:["padding-horizontal","px"],keys:["padding-left","padding-right"],handler:"size"},{aliases:["cursor"],keys:["cursor"],handler:null},{aliases:["display"],keys:["display"],handler:null},{aliases:["height","h"],keys:["height"],handler:"size"},{aliases:["max-height","max-h"],keys:["max-height"],handler:"size"},{aliases:["min-height","min-h"],keys:["min-height"],handler:"size"},{aliases:["width","w"],keys:["width"],handler:"size"},{aliases:["max-width","max-w"],keys:["max-width"],handler:"size"},{aliases:["min-width","min-w"],keys:["min-width"],handler:"size"},{aliases:["justify"],keys:["justify-content"],handler:"justify"},{aliases:["items"],keys:["align-items"],handler:"items"},{aliases:["top"],keys:["top"],handler:"size"},{aliases:["bottom"],keys:["bottom"],handler:"size"},{aliases:["left"],keys:["left"],handler:"size"},{aliases:["right"],keys:["right"],handler:"size"},{aliases:["border-style","bs"],keys:["border-style"],handler:null},{aliases:["border-width","bw"],keys:["border-width"],handler:"size"},{aliases:["border-color","bc"],keys:["border-color"],handler:"color"},{aliases:["radius","r"],keys:["border-radius"],handler:"size",prefix:!0},{aliases:["outline"],keys:["outline"],handler:null},{aliases:["overflow"],keys:["overflow"],handler:null},{aliases:["no"],keys:["no"],handler:"no"},{aliases:["flex"],keys:["display"],handler:"flex",value:"flex"},{aliases:["group"],keys:[],handler:null,value:null},{aliases:["visible"],keys:["visibility"],handler:null,value:"visible"},{aliases:["invisible"],keys:["visibility"],handler:null,value:"hidden"},{aliases:["hidden"],keys:["display"],handler:null,value:"none"},{aliases:["show"],keys:["display"],handler:null,value:"block"},{aliases:["inline"],keys:["display"],handler:null,value:"inline"},{aliases:["inline-block"],keys:["display"],handler:null,value:"inline-block"},{aliases:["center"],keys:["justify-content","align-items"],handler:null,value:"center"},{aliases:["bold"],keys:["font-weight"],handler:null,value:"bold"},{aliases:["underline"],keys:["text-decoration"],handler:null,value:"underline"},{aliases:["absolute"],keys:["position"],handler:null,value:"absolute"},{aliases:["relative"],keys:["position"],handler:null,value:"relative"},{aliases:["static"],keys:["position"],handler:null,value:"static"},{aliases:["fixed"],keys:["position"],handler:null,value:"fixed"},{aliases:["sticky"],keys:["position"],handler:null,value:"sticky"},{aliases:["blueprint"],keys:["blueprint"],handler:null,value:null},{aliases:["inspect"],keys:["inspect"],handler:null,value:null}]},989:(e,t)=>{t.__esModule=!0,t.cssNormalizeRules=t.cssResetRules=void 0,t.cssResetRules=["*:where(:not(iframe, canvas, img, svg, video):not(svg *, symbol *)) {all: unset;display: revert;}","*,*::before,*::after {box-sizing: border-box;}","a, button { cursor: revert;}","ol, ul, menu { list-style: none; }","img { max-width: 100%;}","table {border-collapse: collapse;}","textarea { white-space: revert;}","meter {-webkit-appearance: revert; appearance: revert;}","::placeholder {color: unset;}",":where([hidden]) { display: none;}",":where([contenteditable]) {-moz-user-modify: read-write;-webkit-user-modify: read-write;overflow-wrap: break-word;-webkit-line-break: after-white-space;}",':where([draggable="true"]) {-webkit-user-drag: element;}',"html, body, div, span, applet, object, iframe,\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n    a, abbr, acronym, address, big, cite, code,\n    del, dfn, em, img, ins, kbd, q, s, samp,\n    small, strike, strong, sub, sup, tt, var,\n    b, u, i, center,\n    dl, dt, dd, ol, ul, li,\n    fieldset, form, label, legend,\n    table, caption, tbody, tfoot, thead, tr, th, td,\n    article, aside, canvas, details, embed, \n    figure, figcaption, footer, header, hgroup, \n    menu, nav, output, ruby, section, summary,\n    time, mark, audio, video {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        font-size: 100%;\n        font: inherit;\n        vertical-align: baseline;\n    }","article, aside, details, figcaption, figure, \n    footer, header, hgroup, menu, nav, section {\n        display: block;\n    }","body {\n        line-height: 1;\n    }","ol, ul {\n        list-style: none;\n    }","blockquote, q {\n        quotes: none;\n    }","blockquote:before, blockquote:after,\n    q:before, q:after {\n        content: '';\n        content: none;\n    }","table {\n        border-collapse: collapse;\n        border-spacing: 0;\n    }"],t.cssNormalizeRules=["html { line-height: 1.15; -webkit-text-size-adjust: 100%;}","body {margin: 0;}","body {font-family:system-ui,-apple-system,'Segoe UI',Roboto,Helvetica,Arial,sans-serif,'Apple Color Emoji','Segoe UI Emoji';}","main {display: block;}","h1 {font-size: 2em;margin: 0.67em 0;}","hr {box-sizing: content-box; height: 0; overflow: visible;}","pre {font-family: monospace, monospace;font-size: 1em;}","a {background-color: transparent;}","abbr[title] {border-bottom: none;text-decoration: underline;text-decoration: underline dotted;}","b,strong {font-weight: bolder;}","code,kbd,samp {font-family: monospace, monospace; font-size: 1em;}","small {font-size: 80%;}","sub,sup {font-size: 75%;line-height: 0;position: relative;vertical-align: baseline;}","sub {bottom: -0.25em;}","sup {top: -0.5em;}","img {border-style: none;}","button,input,optgroup,select,textarea {font-family: inherit;font-size: 100%;line-height: 1.15;margin: 0;}","button,input {overflow: visible;}","button,select {text-transform: none;}","button,[type='button'],[type='reset'],[type='submit'] {-webkit-appearance: button;}","button::-moz-focus-inner,[type='button']::-moz-focus-inner,[type='reset']::-moz-focus-inner,[type='submit']::-moz-focus-inner {border-style: none;padding: 0;}","button:-moz-focusring,[type='button']:-moz-focusring,[type='reset']:-moz-focusring,[type='submit']:-moz-focusring {outline: 1px dotted ButtonText;}","fieldset {padding: 0.35em 0.75em 0.625em;}","legend {box-sizing: border-box;color: inherit;display: table;max-width: 100%;padding: 0;white-space: normal;}","progress {vertical-align: baseline;}","textarea {overflow: auto;}","[type='checkbox'],[type='radio'] {box-sizing: border-box; padding: 0; }","[type='number']::-webkit-inner-spin-button,[type='number']::-webkit-outer-spin-button {height: auto;}","[type='search'] {-webkit-appearance: textfield; outline-offset: -2px;}","[type='search']::-webkit-search-decoration {-webkit-appearance: none;}","::-webkit-file-upload-button {-webkit-appearance: button;font: inherit;}","details {display: block;}","summary {display: list-item;}","template {display: none;}","[hidden] {display: none !important;}"]},545:function(e,t,n){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)},r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))};t.__esModule=!0,t.design=void 0;var o,a=n(119),s=n(742),l=n(382),c=n(989),u={cssRules:o=[],insertRule:function(e,t){o[t]=e},extract:function(){return o.join("")}};if("undefined"!=typeof window){var d=document.createElement("style");d.setAttribute("data-origin-shonaui",""),d.setAttribute("media","screen"),d.setAttribute("type","text/css"),d.setAttribute("rel","stylesheet"),d.appendChild(document.createTextNode("")),u=document.head.appendChild(d).sheet}t.design=function(e,t){var n=u.cssRules||u.rules;if(!0===(null==t?void 0:t.cssreset)&&c.cssResetRules.forEach((function(e){null==u||u.insertRule(e,n.length)})),!0===(null==t?void 0:t.normnalize)&&c.cssNormalizeRules.forEach((function(e){null==u||u.insertRule(e,n.length)})),e){var o=(0,l.explodeClasses)(e),d="";return o.forEach((function(e){var o=i({},e),c=[],f=e.identifier.includes("group-hover:");f&&(e.identifier=e.identifier.replace("group-hover:",""),c.push("group-hover")),e.identifier.includes("hover:")&&(e.identifier=e.identifier.replace("hover:",""),c.push("hover")),e.identifier.includes("focus:")&&(e.identifier=e.identifier.replace("focus:",""),c.push("focus"));var h=e.identifier.includes("xs:");h&&(e.identifier=e.identifier.replace("xs:",""));var p=e.identifier.includes("sm:");p&&(e.identifier=e.identifier.replace("sm:",""));var m=e.identifier.includes("md:");m&&(e.identifier=e.identifier.replace("md:",""));var g=e.identifier.includes("lg:");g&&(e.identifier=e.identifier.replace("lg:",""));var v=e.identifier.includes("xl:");v&&(e.identifier=e.identifier.replace("xl:",""));var b=e.identifier.includes("xxl:");b&&(e.identifier=e.identifier.replace("xxl:",""));var y=e.identifier.startsWith("-");y&&(e.identifier=e.identifier.substring(1));var w=e.identifier.startsWith("!");w&&(e.identifier=e.identifier.substring(1));var k=(0,l.filterClass)(e.identifier),x=k.identifier,z=k.value;if(a.default.find((function(t){if(e.isGrouped){var n=e.identifier.substring(e.identifier.indexOf("[")+1,e.identifier.indexOf("]")).split(" "),i=!0;return n.forEach((function(e){var n=(0,l.filterClass)(e),r=n.identifier;n.value,i||(i=t.aliases.includes(r))})),i}return t.aliases.includes(x)}))){var E="";e.isGrouped?e.identifier.substring(e.identifier.indexOf("[")+1,e.identifier.indexOf("]")).split(" ").forEach((function(e){var n=(0,l.filterClass)(e),i=n.identifier,r=n.value;E+=(0,s.resolver)(t,i,r,y,w)})):E=(0,s.resolver)(t,x,z,y,w);var S=[],A="";c.length?c.forEach((function(t){e.isGrouped?(e.identifier.substring(e.identifier.indexOf("[")+1,e.identifier.indexOf("]")).split(" "),S.push({index:n.length,identifier:"".concat(t,":").concat(e.identifier),pseudo:t})):S.push({index:n.length,identifier:"".concat(t,":").concat(e.identifier),pseudo:t}),A+="".concat(t,":")})):S.push({index:n.length,identifier:"".concat(e.identifier),pseudo:null});var _={index:n.length,identifier:A+e.identifier},M="";S.forEach((function(e){var t=(0,l.cssEscape)(o.identifier);M+=f?"".concat(M?", ":"",".group:hover .").concat(t):"".concat(M?", ":"",".").concat(t).concat(e.pseudo?":".concat(e.pseudo):"")}));var j="blueprint"===x?".blueprint *:not(path):not(g) {\n          color: hsla(210, 100%, 100%, 0.9) !important;\n          background: hsla(210, 100%, 50%, 0.5) !important;\n          outline: solid 0.25rem hsla(210, 100%, 100%, 0.5) !important;\n          box-shadow: none !important;\n          filter: none !important;\n        }":"".concat(M," { ").concat(E," }"),C=r([],n,!0),T=(C.filter((function(e){return e.selectorText===M})),C.filter((function(e){return".blueprint :not(path):not(g)"===e.selectorText})),h?"@media (max-width: 576px) { ".concat(j," }"):p?"@media (min-width: 576px) { ".concat(j," }"):m?"@media (min-width: 768px) { ".concat(j," }"):g?"@media (min-width: 992px) { ".concat(j," }"):v?"@media (min-width: 1200px) { ".concat(j," }"):b?"@media (min-width: 1400px) { ".concat(j," }"):j);null==u||u.insertRule(T,_.index),d+=(d?" ":"")+_.identifier}else(null==t?void 0:t.showErrors)&&console.warn("SHONAUI: Invalid token: ".concat(e.identifier))})),d}}},405:(e,t)=>{t.__esModule=!0,t.No=t.Decoration=t.Self=t.Items=t.Flex=t.Direction=t.Justify=t.Size=t.Color=void 0,t.Color=function(e,t,n){var i=e&&e.colors?(null==e?void 0:e.darkMode)?e.colors["dark"===localStorage.getItem("shonaui-theme")?"dark":"light"]:e.colors.light:null;return i&&i[n]?i[n]:n},t.Size=function(e,t,n){var i=e&&(null==e?void 0:e.sizes)?e.sizes:null,r=n;return i&&i[n]&&(r=i[n]),function(e,t){return["cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","%"].some((function(t){return e.endsWith(t)}))}(n)||(r+="px"),r},t.Justify=function(e){switch(e){case"center":return"center";case"start":return"flex-start";case"end":return"flex-end";case"between":return"space-between";case"around":return"space-around";default:return e}},t.Direction=function(e){switch(e){case"row":return"row";case"rowreverse":return"row-reverse";case"column":return"column";case"columnreverse":return"column-reverse";default:return""}},t.Flex=function(e,n,i){return"row"===i||"rowreverse"===i||"column"===i||"columnreverse"===i?"flex-direction: ".concat((0,t.Direction)(i),";"):"wrap"===i||"nowrap"===i?"flex-wrap: ".concat(i):""},t.Items=function(e){switch(e){case"center":return"center";case"start":return"flex-start";case"end":return"flex-end";case"stretch":return"stretch";case"baseline":return"baseline";default:return e}},t.Self=function(e){switch(e){case"center":return"center";case"auto":return"auto";case"start":return"flex-start";case"end":return"flex-end";case"stretch":return"stretch";default:return null}},t.Decoration=function(e){switch(e){case"none":return"none";case"underline":return"underline";case"through":return"line-through";default:return null}},t.No=function(e){switch(e){case"select":return"user-select: none;-ms-user-select: none;-moz-user-select: none;-khtml-user-select: none;-webkit-user-select: none;-webkit-touch-callout: none;";case"drag":return"user-drag: none;-o-user-drag: none;-moz-user-drag: none;-khtml-user-drag: none;-webkit-user-drag: none;";case"outline":return"outline: none;";case"border":return"border: none;";case"overflow":return"overflow: clip;";case"decoration":return"text-decoration: none;";default:return null}}},382:function(e,t,n){var i=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))};t.__esModule=!0,t.insertViewPortMetaTag=t.viewPortMetaTagExists=t.cssEscape=t.hasValue=t.isEmpty=t.filterClass=t.getGroupedClasses=t.explodeClasses=t.namedFunction=void 0;var r=n(119),o=n(639),a=((0,o.getWindow)(),(0,o.getDocument)());function s(e){if(null===e||""===e||void 0===e)return!0;if("object"==typeof e)if(Array.isArray(e)){if(e.length)return!1}else for(var t in e)return!1;return!1}t.namedFunction=function(e,t){return Object.defineProperty(t,"name",{value:e})},t.explodeClasses=function(e){for(var t=!1,n=[],i="",r=0;r<=e.length;r++)if(!(t="["===e[r]||"]"!==e[r]&&t)&&" "===e[r]||r===e.length){var o=!!i.match(/\[[^\]]*]/g);n.push({identifier:i,isGrouped:o}),i=""}else i+=e[r];return n},t.getGroupedClasses=function(e){return e.substring(e.indexOf("[")+1,e.indexOf("]"))},t.filterClass=function(e){var t=e.split("-"),n=t.length,o="",a="";return r.default.forEach((function(e){e.aliases.forEach((function(e){for(var r=e.split("-"),s=r.length,l=[],c=0;c<n;c++)r[c]===t[c]&&l.push(r[c]);if(l.length===s){var u=i([],t,!0);o=u.splice(0,l.length).join("-"),a=u.join("")}}))})),{identifier:o,value:a}},t.isEmpty=function(e){return s(e)},t.hasValue=function(e){return!s(e)};var l=function(e){var t=e;return(t=(t=t.replace(/\b\d/g,(function(e){return"\\0000"+e.charCodeAt(0).toString(16)}))).replace(/\\\s/g,".")).replace(/\s/g,".")};t.cssEscape=function(e){if("function"==typeof CSS.escape)return l(CSS.escape(e));if(0===e.length)throw new TypeError("`CSS.escape` requires an argument.");for(var t,n=String(e),i=n.length,r=-1,o="",a=n.charCodeAt(0);++r<i;)0!==(t=n.charCodeAt(r))?o+=t>=1&&t<=31||127===t||0===r&&t>=48&&t<=57||1===r&&t>=48&&t<=57&&45===a?"\\"+t.toString(16)+" ":0===r&&1===i&&45===t||!(t>=128||45===t||95===t||t>=48&&t<=57||t>=65&&t<=90||t>=97&&t<=122)?"\\"+n.charAt(r):n.charAt(r):o+="�";return l(o)},t.viewPortMetaTagExists=function(){var e=a.querySelector('meta[name="viewport"]');return e&&e.hasAttribute("content")},t.insertViewPortMetaTag=function(){var e,t=a.createElement("meta");t.name="viewport",t.setAttribute("content","width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"),null===(e=a.getElementsByTagName("head")[0])||void 0===e||e.appendChild(t)}},607:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var i,r=0,o=t.length;r<o;r++)!i&&r in t||(i||(i=Array.prototype.slice.call(t,0,r)),i[r]=t[r]);return e.concat(i||Array.prototype.slice.call(t))};t.__esModule=!0,t.shonaui=t.screenSize=t.init=t.setTheme=t.toggleDarkTheme=void 0;var o=n(545),a=n(382),s=n(35),l=n(35);i(t,l,"toggleDarkTheme"),i(t,l,"setTheme");var c=n(639),u=(0,c.getWindow)(),d=(0,c.getDocument)(),f=function(e){(0,a.viewPortMetaTagExists)()||(0,a.insertViewPortMetaTag)(),(0,s.darkModeHandler)(e);var t=[];d.querySelectorAll("*[class]").forEach((function(e){var n=e.className.split(" ");n="object"==typeof e.className.split(" ")?e.className.split(" "):[e.className.split(" ")],t=Array.from(new Set(r(r([],t,!0),n,!0)))})),(0,o.design)(t.join(" "),e)},h={};t.init=function(e){h=e,void 0===u&&"undefined"==typeof self&&void 0===d||f(e)},function(){var e=u.getComputedStyle(d.documentElement,""),t=Array.prototype.slice.call(e).join("").match(/-(moz|webkit|ms)-/)||""===e.OLink&&["","o"];t&&(t=t[1]);var n="WebKit|Moz|MS|O".match(new RegExp("("+t+")","i"));n&&(n=n[1]),t[0].toUpperCase(),t.substr(1)}(),t.screenSize={xs:u.matchMedia("(max-width: 576px)").matches,sm:u.matchMedia("(min-width: 576px)").matches},t.shonaui={init:function(e){(0,t.init)(e)}},void 0===u&&"undefined"==typeof self&&void 0===d||(console.log("Hello World"),f(h),u.addEventListener("DOMContentLoaded",(function(e){var t=d.body;new MutationObserver((function(e,t){for(var n=0,i=e;n<i.length;n++){var r=i[n];"attributes"===r.type&&"class"===r.attributeName&&(console.log("Something changed...."),f(h))}})).observe(t,{childList:!0,subtree:!0,attributes:!0})})))},742:(e,t,n)=>{t.__esModule=!0,t.resolver=void 0;var i=n(405),r=n(119);t.resolver=function(e,t,n,o,a){var s={},l=r.default.find((function(e){return e.aliases.includes(t)}));if(n)l.aliases.forEach((function(t){var r="";l.keys.forEach((function(t){r+=function(e,t,n,r,o,a){return"color"===t?"".concat(n,": ").concat((0,i.Color)(e,n,r),";"):"size"===t?"".concat(n,": ").concat(o?"-":"").concat((0,i.Size)(e,n,r)).concat(a?" !important":"",";"):"justify"===t?"justify-content: ".concat((0,i.Justify)(r)).concat(a?" !important":"",";"):"items"===t?"align-items: ".concat((0,i.Items)(r)).concat(a?" !important":"",";"):"no"===t?(0,i.No)(r):"flex"===t?(0,i.Flex)(e,n,r):"".concat(n,": ").concat(r).concat(a?" !important":"",";")}(e,l.handler,t,n,o,a)})),s[t]=r}));else{var c="";l.keys.forEach((function(e){c+="".concat(e,": ").concat(l.value).concat(a?" !important":"","; ")})),s[t]=c}return s[t]}},639:(e,t)=>{function n(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(r){void 0===e[r]?e[r]=t[r]:n(t[r])&&n(e[r])&&Object.keys(t[r]).length>0&&i(e[r],t[r])}))}t.__esModule=!0,t.ssrWindow=t.getWindow=t.ssrDocument=t.getDocument=void 0;var r={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},getElementsByTagName:function(){return[]},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};t.ssrDocument=r,t.getDocument=function(){var e="undefined"!=typeof document?document:{};return i(e,r),e};var o={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};t.ssrWindow=o,t.getWindow=function(){var e="undefined"!=typeof window?window:{};return i(e,o),e}},35:function(e,t){var n=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{l(i.next(e))}catch(e){o(e)}}function s(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};t.__esModule=!0,t.darkModeHandler=t.setTheme=t.toggleDarkTheme=void 0;var r=function(e){var t,n;void 0!==(null===(n=null===document||void 0===document?void 0:document.body)||void 0===n?void 0:n.classList)&&((t=document.body.classList).remove.apply(t,Array.from(document.body.classList.entries()).map((function(e){return e[1]})).filter((function(e){return e.startsWith("theme")}))),document.body.classList.add("theme-".concat(e)),localStorage.setItem("shonaui-theme",e))};t.toggleDarkTheme=function(){var e=localStorage.getItem("shonaui-theme");r("dark"===e?"light":"dark")},t.setTheme=function(e){r(e)},t.darkModeHandler=function(e){return n(void 0,void 0,void 0,(function(){var t,n;return i(this,(function(i){switch(i.label){case 0:return[4,null==e?void 0:e.onDocumentReady];case 1:return!0===i.sent()?(window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",(function(e){var t=e.matches?"dark":"light";r(t)})),document.addEventListener("DOMContentLoaded",(function(e){var t=window.matchMedia("(prefers-color-scheme: dark)").matches,n=localStorage.getItem("shonaui-theme");r(n||(t?"dark":"light"))}))):(window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",(function(e){var t=e.matches?"dark":"light";r(t)})),t=window.matchMedia("(prefers-color-scheme: dark)").matches,n=localStorage.getItem("shonaui-theme"),r(n||(t?"dark":"light"))),[2]}}))}))}}},t={};return function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}(607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,